#+OPTIONS: ^:nil

#+TITLE: 2.1 SkBitmap

SkBitmap用来指定一个光栅位图(raster bitmap)，这个位图包含宽度和高度信息，另外有一个指针指向像素数据。SkBitmap有两种用法：
- 作为普通的绘制对象。这种情况下一个SkBitmap对象就是一张图片，和文字一样，只是一个绘制对象。
- 作为图像绘制的承载。这种情况下，一个SkBitmap仍然可以理解成一张图片，不过这是一张类似于画布的图片，所有的绘制操作都作用在这个图片上。
本节我们介绍前面一种，用来展示本地图片到界面。

SkBitmap作为绘制对象时，因为内部有指向像素数据的指针(bitmap.getPixels())，所以很容易就能展示在界面上。
#+BEGIN_SRC C++
LRESULT OnPaint(UINT nMsg, WPARAM wParam, LPARAM lParam, BOOL &bHandled) {
        PAINTSTRUCT ps;
        HDC hdc = BeginPaint(&ps);

        SkBitmap bitmap;

        GetResourceAsBitmap("skia.png", &bitmap);

        BITMAPINFO bmi;
        memset(&bmi, 0, sizeof(bmi));
        bmi.bmiHeader.biSize        = sizeof(BITMAPINFOHEADER);
        bmi.bmiHeader.biWidth       = bitmap.width();
        bmi.bmiHeader.biHeight      = -bitmap.height();
        bmi.bmiHeader.biPlanes      = 1;
        bmi.bmiHeader.biBitCount    = 32;
        bmi.bmiHeader.biCompression = BI_RGB;
        bmi.bmiHeader.biSizeImage   = 0;

        bitmap.lockPixels();
        int ret = SetDIBitsToDevice(hdc,
                                    40, 30,
                                    bitmap.width(), bitmap.height(),
                                    0, 0,
                                    0, bitmap.height(),
                                    bitmap.getPixels(),
                                    &bmi,
                                    DIB_RGB_COLORS);
        (void)ret; // we're ignoring potential failures for now.
        bitmap.unlockPixels();

        EndPaint(&ps);

        bHandled = TRUE;
        return 0;
    }
#+END_SRC
