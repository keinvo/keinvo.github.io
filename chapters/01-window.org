#+BEGIN_COMMENT
#+SETUPFILE: theme-bigblow-local.setup
#+END_COMMENT
* 第一个windows窗口程序
#+BEGIN_SRC C++
// HelloWin.cpp : Defines the entry point for the application.
//

#include "stdafx.h"
#include "HelloWin.h"

LPCTSTR szWindowClass = __T("HelloWinClass");

LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
	PAINTSTRUCT ps;
	HDC hdc;

	switch (message)
	{
	case WM_PAINT:
		hdc = BeginPaint(hWnd, &ps);
		RECT rect; GetClientRect(hWnd, &rect);
		DrawText(hdc, __T("Hello, Windows"), -1, &rect,
			DT_CENTER | DT_VCENTER | DT_SINGLELINE);
		EndPaint(hWnd, &ps);
		break;
	case WM_DESTROY:
		PostQuitMessage(0);
		break;
	default:
		return DefWindowProc(hWnd, message, wParam, lParam);
	}
	return 0;
}

ATOM MyRegisterClass(HINSTANCE hInstance)
{
	WNDCLASSEX wcex;

	wcex.cbSize = sizeof(WNDCLASSEX);
	wcex.style			= CS_HREDRAW | CS_VREDRAW;
	wcex.lpfnWndProc	= WndProc;
	wcex.cbClsExtra		= 0;
	wcex.cbWndExtra		= 0;
	wcex.hInstance		= hInstance;
	wcex.hIcon			= LoadIcon(hInstance, MAKEINTRESOURCE(IDI_HELLOWIN));
	wcex.hCursor		= LoadCursor(NULL, IDC_ARROW);
	wcex.hbrBackground	= (HBRUSH)(COLOR_WINDOW+1);
	wcex.lpszMenuName	= MAKEINTRESOURCE(IDC_HELLOWIN);
	wcex.lpszClassName	= szWindowClass;
	wcex.hIconSm		= LoadIcon(wcex.hInstance, MAKEINTRESOURCE(IDI_SMALL));

	return RegisterClassEx(&wcex);
}

BOOL InitInstance(HINSTANCE hInstance, int nCmdShow)
{
	HWND hWnd = CreateWindow(szWindowClass, _T("HelloWin"), WS_OVERLAPPEDWINDOW,
		CW_USEDEFAULT, 0, CW_USEDEFAULT, 0, NULL, NULL, hInstance, NULL);

	if (!hWnd){ return FALSE;}

	ShowWindow(hWnd, nCmdShow);
	UpdateWindow(hWnd);

	return TRUE;
}

int APIENTRY _tWinMain(HINSTANCE hInstance,
                     HINSTANCE hPrevInstance,
                     LPTSTR    lpCmdLine,
                     int       nCmdShow)
{
	MyRegisterClass(hInstance);

	if (!InitInstance (hInstance, nCmdShow)){ return FALSE;}

	MSG msg;
	while (GetMessage(&msg, NULL, 0, 0))
	{
		TranslateMessage(&msg);
		DispatchMessage(&msg);
	}

	return (int) msg.wParam;
}
#+END_SRC

一个典型的windows窗口程序有如下结构：
- 程序入口_tWinMain。
- 调用RegisterClassEx注册窗口类。
- 调用CreateWindow创建窗口，窗口创建完成后ShowWindow及UpdateWindow。
- 创建消息循环。上面调用UpdateWindow以后，窗口就已经显示在屏幕上了，这个时候需要让窗口能响应windows消息，需要循环调用GetMessage从窗口消息队列取消息，经过TranslateMessage转义后调用DispatchMessage派发给窗口消息处理过程。
- 在窗口消息过程WndProc里处理感兴趣的消息。

